/*
  Copyright 1999-2010 ImageMagick Studio LLC, a non-profit organization
  dedicated to making software imaging solutions freely available.

  You may not use this file except in compliance with the License.
  obtain a copy of the License at

    http://www.wizards-toolkit.org/script/license.php

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  Wizard the License for the specific language governing permissions and
  limitations under the License.

  Wizard's Toolkit crypto test vectors.
*/
#ifndef _WIZARDSTOOLKIT_VALIDATE_H
#define _WIZARDSTOOLKIT_VALIDATE_H

/*
  AES test vectors.
*/
#define AESEncipherTestVectors 3
#define AESDecipherTestVectors 3

struct AESTestVector
{
  size_t
    key_length,
    length,
    result_length;

  int
    fail;

  unsigned char
    key[32],
    plaintext[16],
    result[16];
};

struct AESTestVector
  aes_encipher_test_vector[] = /* From FIPS-197 */
  {
    {
      16, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
      { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd,
        0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a },
    },
    {
      24, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17 },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
      { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf,
        0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 },
    },
    {
      32, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
      { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc,
        0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 },
    },
  };

struct AESTestVector
  aes_decipher_test_vector[] = /* From FIPS-197 */
  {
    {
      16, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd,
        0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
    },
    {
      24, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17 },
      { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf,
        0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
    },
    {
      32, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f },
      { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc,
        0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
    },
  };

/*
  BZip test vectors.
*/
#define BZipDigestsize  16
#define BZipTestVectors  7

struct BZipTestVector
{
  unsigned char
    plaintext[128],
    chaos[128];

  size_t
    chaossize;
};

struct BZipTestVector
  bzip_test_vector[] =
  {
    { "",
      { 0x42, 0x5a, 0x68, 0x36, 0x17, 0x72, 0x45, 0x38, 0x50, 0x90,
        0x00, 0x00, 0x00, 0x00 },
      14
    },
    { "a",
      { 0x42, 0x5a, 0x68, 0x36, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59,
        0x19, 0x93, 0x9b, 0x6b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20,
        0x00, 0x20, 0x00, 0x21, 0x18, 0x46, 0x82, 0xee, 0x48, 0xa7,
        0x0a, 0x12, 0x03, 0x32, 0x73, 0x6d, 0x60 },
      37
    },
    { "abc",
      { 0x42, 0x5a, 0x68, 0x36, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59,
        0x64, 0x8c, 0xbb, 0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 0x38,
        0x00, 0x20, 0x00, 0x21, 0x98, 0x19, 0x84, 0x61, 0x77, 0x24,
        0x53, 0x85, 0x09, 0x06, 0x48, 0xcb, 0xb7, 0x30 },
      38
    },
    { "message digest",
      { 0x42, 0x5a, 0x68, 0x36, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59,
        0xbf, 0xc9, 0x03, 0x57, 0x00, 0x00, 0x04, 0x91, 0x80, 0x40,
        0x00, 0x26, 0xa2, 0x0c, 0x00, 0x20, 0x00, 0x22, 0x1a, 0x1a,
        0x7a, 0x82, 0x0c, 0x98, 0x8b, 0x29, 0x89, 0x87, 0x1d, 0x0b,
        0xc5, 0xdc, 0x91, 0x4e, 0x14, 0x24, 0x2f, 0xf2, 0x40, 0xd5,
        0xc0 },
      51
    },
    { "abcdefghijklmnopqrstuvwxyz",
      { 0x42, 0x5a, 0x68, 0x36, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59,
        0x77, 0xbf, 0x93, 0x96, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3f,
        0xff, 0xff, 0xf0, 0x20, 0x00, 0x22, 0x9a, 0x34, 0x01, 0xa0,
        0x01, 0xa1, 0x40, 0x00, 0x01, 0x93, 0x20, 0xc1, 0x4b, 0x16,
        0x35, 0xcf, 0x84, 0x65, 0x32, 0xa5, 0x6d, 0x7c, 0x67, 0x5b,
        0xe7, 0x7c, 0x7f, 0x17, 0x72, 0x45, 0x38, 0x50, 0x90, 0x77,
        0xbf, 0x93, 0x96 },
      63
    },
    { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      { 0x42, 0x5a, 0x68, 0x36, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59,
        0xa0, 0x74, 0x21, 0x88, 0x00, 0x00, 0x05, 0x0f, 0x80, 0x7f,
        0xe0, 0x3f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xf0, 0x20,
        0x00, 0x41, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0,
        0x41, 0x88, 0x28, 0xc3, 0x90, 0x49, 0x45, 0x98, 0x69, 0xc7,
        0xa0, 0x8a, 0x49, 0xa8, 0xaa, 0xcb, 0xb0, 0xcb, 0x4d, 0xb8,
        0xeb, 0xcf, 0xc1, 0x0c, 0x51, 0xc9, 0x2c, 0xd3, 0xd1, 0x4d,
        0x55, 0xd9, 0x6d, 0xd7, 0xe1, 0x8e, 0x59, 0xe9, 0xae, 0xdb,
        0xf1, 0xcf, 0x5d, 0xf9, 0xef, 0xdf, 0x8b, 0xb9, 0x22, 0x9c,
        0x28, 0x48, 0x50, 0x3a, 0x10, 0xc4, 0x00 },
      107
    },
    { "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
      { 0x42, 0x5a, 0x68, 0x36, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59,
        0x16, 0x08, 0x79, 0x96, 0x00, 0x00, 0x07, 0x88, 0x00, 0x7f,
        0xe0, 0x20, 0x00, 0x31, 0x00, 0x30, 0x0a, 0xa8, 0x30, 0x9a,
        0x60, 0xd8, 0xe0, 0xe8, 0x81, 0x22, 0x85, 0x8f, 0x0c, 0x1f,
        0x17, 0x72, 0x45, 0x38, 0x50, 0x90, 0x16, 0x08, 0x79, 0x96 },
      50
    }
  };

/*
  CRC64 test vectors.
*/
#define CRC64Digestsize  8
#define CRC64TestVectors  7

struct CRC64TestVector
{
  unsigned char
    plaintext[128],
    digest[CRC64Digestsize];
};

struct CRC64TestVector
  crc64_test_vector[] =
  {
    { "",
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    { "a",
      { 0x5b, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    { "abc",
      { 0x58, 0x89, 0x3b, 0xb0, 0x00, 0x00, 0x00, 0x00 } },
    { "message digest",
      { 0x79, 0xc0, 0x46, 0x3f, 0x44, 0xaa, 0x6f, 0x5d } },
    { "abcdefghijklmnopqrstuvwxyz",
      { 0xbd, 0x64, 0x21, 0xa0, 0x48, 0xb5, 0xb6, 0x0f } },
    { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      { 0xdb, 0x90, 0x8b, 0x6d, 0x7d, 0xda, 0x36, 0x10 } },
    { "12345678901234567890123456789012345678901234567890123456789012"
      "345678901234567890",
      { 0x83, 0xa2, 0xa4, 0xd2, 0x89, 0xfd, 0xf3, 0x89 } }
  };

/*
  EllipticCurve test vectors.
  Note, this is really AES vectors until we get elliptic curve implemented.
*/
#define EllipticCurveEncipherTestVectors 3
#define EllipticCurveDecipherTestVectors 3

struct EllipticCurveTestVector
{
  size_t
    key_length,
    length,
    result_length;

  int
    fail;

  unsigned char
    key[32],
    plaintext[16],
    result[16];
};

struct EllipticCurveTestVector
  elliptic_curve_encipher_test_vector[] = /* From FIPS-197 */
  {
    {
      16, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
      { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd,
        0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a },
    },
    {
      24, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17 },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
      { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf,
        0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 },
    },
    {
      32, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
      { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc,
        0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 },
    },
  };

struct EllipticCurveTestVector
  elliptic_curve_decipher_test_vector[] = /* From FIPS-197 */
  {
    {
      16, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd,
        0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
    },
    {
      24, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17 },
      { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf,
        0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
    },
    {
      32, 16, 16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f },
      { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc,
        0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 },
      { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff },
    },
  };

/*
  HMAC-MD5 test vectors from RFC2202.
*/
#define HMACMD5Digestsize  16
#define HMACMD5TestVectors  7

struct HMACMD5TestVector
{
  unsigned char
    key[128],
    plaintext[128],
    digest[HMACMD5Digestsize];
};

struct HMACMD5TestVector
  hmac_md5_test_vector[] =
  {
    {
      { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x00},
      "Hi There",
      { 0x92, 0x94, 0x72, 0x7a, 0x36, 0x38, 0xbb, 0x1c, 0x13, 0xf4,
        0x8e, 0xf8, 0x15, 0x8b, 0xfc, 0x9d }
    },
    {
      { 'J', 'e', 'f', 'e', 0 },
      "what do ya want for nothing?",
      { 0x75, 0x0c, 0x78, 0x3e, 0x6a, 0xb0, 0xb5, 0x03, 0xea, 0xa8,
        0x6e, 0x31, 0x0a, 0x5d, 0xb7, 0x38 }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00 },
      { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0x00 },
      { 0x56, 0xbe, 0x34, 0x52, 0x1d, 0x14, 0x4c, 0x88, 0xdb, 0xb8,
        0xc7, 0x33, 0xf0, 0xe8, 0xb3, 0xf6 }
    },
    {
      { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18, 0x19, 0x00 },
      {
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0x00 },
      { 0x69, 0x7e, 0xaf, 0x0a, 0xca, 0x3a, 0x3a, 0xea, 0x3a, 0x75,
        0x16, 0x47, 0x46, 0xff, 0xaa, 0x79 }
    },
    {
      { 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
        0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00 },
      "Test With Truncation",
      { 0x56, 0x46, 0x1e, 0xf2, 0x34, 0x2e, 0xdc, 0x00, 0xf9, 0xba,
        0xb9, 0x95, 0x69, 0x0e, 0xfd, 0x4c }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0x00 },
      "Test Using Larger Than Block-Size Key - Hash Key First",
      { 0x6b, 0x1a, 0xb7, 0xfe, 0x4b, 0xd7, 0xbf, 0x8f, 0x0b, 0x62,
        0xe6, 0xce, 0x61, 0xb9, 0xd0, 0xcd }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0x00 },
      "Test Using Larger Than Block-Size Key and Larger Than One "
      "Block-Size Data",
      { 0x6f, 0x63, 0x0f, 0xad, 0x67, 0xcd, 0xa0, 0xee, 0x1f, 0xb1,
        0xf5, 0x62, 0xdb, 0x3a, 0xa5, 0x3e }
    },
    { /* cross page test, need to retain key */
      { 'J', 'e', 'f', 'e', 0 },
      "what do ya want for nothing?",
      { 0x75, 0x0c, 0x78, 0x3e, 0x6a, 0xb0, 0xb5, 0x03, 0xea, 0xa8,
        0x6e, 0x31, 0x0a, 0x5d, 0xb7, 0x38 }
    },
  };

/*
  HMAC-SHA1 test vectors from RFC2202.
*/
#define HMACSHA1Digestsize  20
#define HMACSHA1TestVectors  7

struct HMACSHA1TestVector
{
  unsigned char
    key[128],
    plaintext[128],
    digest[HMACSHA1Digestsize];
};

struct HMACSHA1TestVector
  hmac_sha1_test_vector[] =
  {
    {
      { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x00},
      "Hi There",
      { 0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64, 0xe2, 0x8b,
        0xc0, 0xb6, 0xfb ,0x37, 0x8c, 0x8e, 0xf1, 0x46, 0xbe, 0x00 }
    },
    {
      { 'J', 'e', 'f', 'e', 0 },
      "what do ya want for nothing?",
      { 0xef, 0xfc, 0xdf, 0x6a, 0xe5, 0xeb, 0x2f, 0xa2, 0xd2, 0x74,
        0x16, 0xd5, 0xf1, 0x84, 0xdf, 0x9c, 0x25, 0x9a, 0x7c, 0x79 }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0x00},
      { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0x00 },
      { 0x12, 0x5d, 0x73, 0x42, 0xb9, 0xac, 0x11, 0xcd, 0x91, 0xa3,
        0x9a, 0xf4, 0x8a, 0xa1, 0x7b, 0x4f, 0x63, 0xf1, 0x75, 0xd3 }
    },
    {
      { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18, 0x19, 0x00 },
      {
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0x00 },
      { 0x4c, 0x90, 0x07, 0xf4, 0x02, 0x62, 0x50, 0xc6, 0xbc, 0x84,
        0x14, 0xf9, 0xbf, 0x50, 0xc8, 0x6c, 0x2d, 0x72, 0x35, 0xda }

    },
    {
      { 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
        0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
        0x00 },
      "Test With Truncation",
      { 0x4c, 0x1a, 0x03, 0x42, 0x4b, 0x55, 0xe0, 0x7f, 0xe7, 0xf2,
        0x7b, 0xe1, 0xd5, 0x8b, 0xb9, 0x32, 0x4a, 0x9a, 0x5a, 0x04 }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0x00 },
      "Test Using Larger Than Block-Size Key - Hash Key First",
      { 0xaa, 0x4a, 0xe5, 0xe1, 0x52, 0x72, 0xd0, 0x0e, 0x95, 0x70,
        0x56, 0x37, 0xce, 0x8a, 0x3b, 0x55, 0xed, 0x40, 0x21, 0x12 }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0x00 },
      "Test Using Larger Than Block-Size Key and Larger Than One "
      "Block-Size Data",
      { 0xe8, 0xe9, 0x9d, 0x0f, 0x45, 0x23, 0x7d, 0x78, 0x6d, 0x6b,
        0xba, 0xa7, 0x96, 0x5c, 0x78, 0x08, 0xbb, 0xff, 0x1a, 0x91 }
    },
    { /* cross page test */
      { 'J', 'e', 'f', 'e', 0 },
      "what do ya want for nothing?",
      { 0xef, 0xfc, 0xdf, 0x6a, 0xe5, 0xeb, 0x2f, 0xa2, 0xd2, 0x74,
        0x16, 0xd5, 0xf1, 0x84, 0xdf, 0x9c, 0x25, 0x9a, 0x7c, 0x79 }
    },
  };

/*
  HMAC-SHA2256 test vectors from draft-ietf-ipsec-ciph-SHA-256-01.txt.
*/
#define HMACSHA2256Digestsize  32
#define HMACSHA2256TestVectors  10

struct HMACSHA2256TestVector
{
  unsigned char
    key[128],
    plaintext[128],
    digest[HMACSHA2256Digestsize];
};

struct HMACSHA2256TestVector
  hmac_sha2256_test_vector[] =
  {
    {
      { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
        0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x00 },
      { "abc" },
      { 0xa2, 0x1b, 0x1f, 0x5d, 0x4c, 0xf4, 0xf7, 0x3a, 0x4d, 0xd9, 0x39,
        0x75, 0x0f, 0x7a, 0x06, 0x6a, 0x7f, 0x98, 0xcc, 0x13, 0x1c, 0xb1,
        0x6a, 0x66, 0x92, 0x75, 0x90, 0x21, 0xcf, 0xab, 0x81, 0x81 },
    },
    {
      { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
        0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x00 },
      { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" },
      { 0x10, 0x4f, 0xdc, 0x12, 0x57, 0x32, 0x8f, 0x08, 0x18, 0x4b, 0xa7,
        0x31, 0x31, 0xc5, 0x3c, 0xae, 0xe6, 0x98, 0xe3, 0x61, 0x19, 0x42,
        0x11, 0x49, 0xea, 0x8c, 0x71, 0x24, 0x56, 0x69, 0x7d, 0x30 }
    },
    {
      { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
        0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x00 },
      { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" },
      { 0x47, 0x03, 0x05, 0xfc, 0x7e, 0x40, 0xfe, 0x34, 0xd3, 0xee, 0xb3,
        0xe7, 0x73, 0xd9, 0x5a, 0xab, 0x73, 0xac, 0xf0, 0xfd, 0x06, 0x04,
        0x47, 0xa5, 0xeb, 0x45, 0x95, 0xbf, 0x33, 0xa9, 0xd1, 0xa3 }
    },
    {
      { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
        0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x00 },
      { "Hi There" },
      { 0x19, 0x8a, 0x60, 0x7e, 0xb4, 0x4b, 0xfb, 0xc6, 0x99, 0x03, 0xa0,
        0xf1, 0xcf, 0x2b, 0xbd, 0xc5, 0xba, 0x0a, 0xa3, 0xf3, 0xd9, 0xae,
        0x3c, 0x1c, 0x7a, 0x3b, 0x16, 0x96, 0xa0, 0xb6, 0x8c, 0xf7 }
    },
    {
      { "Jefe" },
      { "what do ya want for nothing?" },
      { 0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24,
        0x26, 0x08, 0x95, 0x75, 0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27,
        0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43 }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00 },
      { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
        0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0x00 },
      { 0xcd, 0xcb, 0x12, 0x20, 0xd1, 0xec, 0xcc, 0xea, 0x91, 0xe5, 0x3a,
        0xba, 0x30, 0x92, 0xf9, 0x62, 0xe5, 0x49, 0xfe, 0x6c, 0xe9, 0xed,
        0x7f, 0xdc, 0x43, 0x19, 0x1f, 0xbd, 0xe4, 0x5c, 0x30, 0xb0 }
    },
    {
      { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
        0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21,
        0x22, 0x23, 0x24, 0x25, 0x00 },
      { 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0x00 },
      { 0xd4, 0x63, 0x3c, 0x17, 0xf6, 0xfb, 0x8d, 0x74, 0x4c, 0x66, 0xde,
        0xe0, 0xf8, 0xf0, 0x74, 0x55, 0x6e, 0xc4, 0xaf, 0x55, 0xef, 0x07,
        0x99, 0x85, 0x41, 0x46, 0x8e, 0xb4, 0x9b, 0xd2, 0xe9, 0x17 }
    },
    {
      { 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
        0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
        0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00 },
      { "Test With Truncation" },
      { 0x75, 0x46, 0xaf, 0x01, 0x84, 0x1f, 0xc0, 0x9b, 0x1a, 0xb9, 0xc3,
        0x74, 0x9a, 0x5f, 0x1c, 0x17, 0xd4, 0xf5, 0x89, 0x66, 0x8a, 0x58,
        0x7b, 0x27, 0x00, 0xa9, 0xc9, 0x7c, 0x11, 0x93, 0xcf, 0x42 }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0x00 },
      { "Test Using Larger Than Block-Size Key - Hash Key First" },
      { 0x69, 0x53, 0x02, 0x5e, 0xd9, 0x6f, 0x0c, 0x09, 0xf8, 0x0a, 0x96,
        0xf7, 0x8e, 0x65, 0x38, 0xdb, 0xe2, 0xe7, 0xb8, 0x20, 0xe3, 0xdd,
        0x97, 0x0e, 0x7d, 0xdd, 0x39, 0x09, 0x1b, 0x32, 0x35, 0x2f }
    },
    {
      { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0x00 },
      { "Test Using Larger Than Block-Size Key and Larger Than "
        "One Block-Size Data" },
      { 0x63, 0x55, 0xac, 0x22, 0xe8, 0x90, 0xd0, 0xa3, 0xc8, 0x48, 0x1a,
        0x5c, 0xa4, 0x82, 0x5b, 0xc8, 0x84, 0xd3, 0xe7, 0xa1, 0xff, 0x98,
        0xa2, 0xfc, 0x2a, 0xc7, 0xd8, 0xe0, 0x64, 0xc3, 0xb2, 0xe6 }
    },
  };

/*
  LZMA test vectors.
*/
#define LZMADigestsize  16
#define LZMATestVectors  7

struct LZMATestVector
{
  unsigned char
    plaintext[144],
    chaos[144];

  size_t
    chaossize;
};

struct LZMATestVector
  lzma_test_vector[] =
  {
    { "",
      { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x0a, 0xe1, 0xfb,
        0x0c, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xdf, 0x44, 0x21,
        0x18, 0x9b, 0x4b, 0x9a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0a,
        0x59, 0x5a },
      32
    },
    { "a",
      { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x0a, 0xe1, 0xfb,
        0x0c, 0xa1, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00,
        0x74, 0x2f, 0xe5, 0xa3, 0x01, 0x00, 0x00, 0x61, 0x00, 0x00,
        0x00, 0x00, 0xca, 0x97, 0x81, 0x12, 0xca, 0x1b, 0xbd, 0xca,
        0xfa, 0xc2, 0x31, 0xb3, 0x9a, 0x23, 0xdc, 0x4d, 0xa7, 0x86,
        0xef, 0xf8, 0x14, 0x7c, 0x4e, 0x72, 0xb9, 0x80, 0x77, 0x85,
        0xaf, 0xee, 0x48, 0xbb, 0x00, 0x01, 0x31, 0x01, 0x0f, 0x82,
        0xdc, 0x91, 0x18, 0x9b, 0x4b, 0x9a, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x0a, 0x59, 0x5a },
      84
    },
    { "abc",
      { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x0a, 0xe1, 0xfb,
        0x0c, 0xa1, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00,
        0x74, 0x2f, 0xe5, 0xa3, 0x01, 0x00, 0x02, 0x61, 0x62, 0x63,
        0x00, 0x00, 0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea,
        0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03,
        0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61,
        0xf2, 0x00, 0x15, 0xad, 0x00, 0x01, 0x33, 0x03, 0xa1, 0x81,
        0xe4, 0x4d, 0x18, 0x9b, 0x4b, 0x9a, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x0a, 0x59, 0x5a },
      84
    },
    { "message digest",
      { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x0a, 0xe1, 0xfb,
        0x0c, 0xa1, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00,
        0x74, 0x2f, 0xe5, 0xa3, 0x01, 0x00, 0x0d, 0x6d, 0x65, 0x73,
        0x73, 0x61, 0x67, 0x65, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73,
        0x74, 0x00, 0x00, 0x00, 0xf7, 0x84, 0x6f, 0x55, 0xcf, 0x23,
        0xe1, 0x4e, 0xeb, 0xea, 0xb5, 0xb4, 0xe1, 0x55, 0x0c, 0xad,
        0x5b, 0x50, 0x9e, 0x33, 0x48, 0xfb, 0xc4, 0xef, 0xa3, 0xa1,
        0x41, 0x3d, 0x39, 0x3c, 0xb6, 0x50, 0x00, 0x01, 0x3e, 0x0e,
        0x51, 0x83, 0xfb, 0x86, 0x18, 0x9b, 0x4b, 0x9a, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x0a, 0x59, 0x5a },
      96
    },
    { "abcdefghijklmnopqrstuvwxyz",
      { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x0a, 0xe1, 0xfb,
        0x0c, 0xa1, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00,
        0x74, 0x2f, 0xe5, 0xa3, 0x01, 0x00, 0x19, 0x61, 0x62, 0x63,
        0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
        0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x78, 0x79, 0x7a, 0x00, 0x00, 0x00, 0x71, 0xc4, 0x80, 0xdf,
        0x93, 0xd6, 0xae, 0x2f, 0x1e, 0xfa, 0xd1, 0x44, 0x7c, 0x66,
        0xc9, 0x52, 0x5e, 0x31, 0x62, 0x18, 0xcf, 0x51, 0xfc, 0x8d,
        0x9e, 0xd8, 0x32, 0xf2, 0xda, 0xf1, 0x8b, 0x73, 0x00, 0x01,
        0x4a, 0x1a, 0xde, 0xeb, 0x72, 0xd7, 0x18, 0x9b, 0x4b, 0x9a,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x59, 0x5a },
      108
    },
    { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x0a, 0xe1, 0xfb,
        0x0c, 0xa1, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00,
        0x74, 0x2f, 0xe5, 0xa3, 0x01, 0x00, 0x3d, 0x41, 0x42, 0x43,
        0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d,
        0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71,
        0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x30,
        0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00,
        0x00, 0x00, 0xdb, 0x4b, 0xfc, 0xbd, 0x4d, 0xa0, 0xcd, 0x85,
        0xa6, 0x0c, 0x3c, 0x37, 0xd3, 0xfb, 0xd8, 0x80, 0x5c, 0x77,
        0xf1, 0x5f, 0xc6, 0xb1, 0xfd, 0xfe, 0x61, 0x4e, 0xe0, 0xa7,
        0xc8, 0xfd, 0xb4, 0xc0, 0x00, 0x01, 0x6e, 0x3e, 0xa9, 0xee,
        0x99, 0x1a, 0x18, 0x9b, 0x4b, 0x9a, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x0a, 0x59, 0x5a },
      144
    },
    { "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
      { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x0a, 0xe1, 0xfb,
        0x0c, 0xa1, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00,
        0x74, 0x2f, 0xe5, 0xa3, 0xe0, 0x00, 0x4f, 0x00, 0x11, 0x5d,
        0x00, 0x18, 0x8c, 0x82, 0xb6, 0xc4, 0x11, 0x34, 0x5c, 0x4e,
        0xe1, 0xdc, 0xc9, 0x2b, 0xff, 0x38, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xf3, 0x71, 0xbc, 0x4a, 0x31, 0x1f, 0x2b, 0x00,
        0x9e, 0xef, 0x95, 0x2d, 0xd8, 0x3c, 0xa8, 0x0e, 0x2b, 0x60,
        0x02, 0x6c, 0x8e, 0x93, 0x55, 0x92, 0xd0, 0xf9, 0xc3, 0x08,
        0x45, 0x3c, 0x81, 0x3e, 0x00, 0x01, 0x45, 0x50, 0x9f, 0x5f,
        0xe3, 0xc6, 0x18, 0x9b, 0x4b, 0x9a, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x0a, 0x59, 0x5a },
      104
    }
  };

/*
  MD5 test vectors from RFC1321.
*/
#define MD5Digestsize  16
#define MD5TestVectors  7

struct MD5TestVector
{
  unsigned char
    plaintext[128],
    digest[MD5Digestsize];
};

struct MD5TestVector
  md5_test_vector[] =
  {
    { "",
      { 0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04, 0xe9, 0x80,
        0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e } },
    { "a",
      { 0x0c, 0xc1, 0x75, 0xb9, 0xc0, 0xf1, 0xb6, 0xa8, 0x31, 0xc3,
        0x99, 0xe2, 0x69, 0x77, 0x26, 0x61 } },
    { "abc",
      { 0x90, 0x01, 0x50, 0x98, 0x3c, 0xd2, 0x4f, 0xb0, 0xd6, 0x96,
        0x3f, 0x7d, 0x28, 0xe1, 0x7f, 0x72 } },
    { "message digest",
      { 0xf9, 0x6b, 0x69, 0x7d, 0x7c, 0xb7, 0x93, 0x8d, 0x52, 0x5a,
        0x2f, 0x31, 0xaa, 0xf1, 0x61, 0xd0 } },
    { "abcdefghijklmnopqrstuvwxyz",
      { 0xc3, 0xfc, 0xd3, 0xd7, 0x61, 0x92, 0xe4, 0x00, 0x7d, 0xfb,
        0x49, 0x6c, 0xca, 0x67, 0xe1, 0x3b } },
    { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      { 0xd1, 0x74, 0xab, 0x98, 0xd2, 0x77, 0xd9, 0xf5, 0xa5, 0x61,
        0x1c, 0x2c, 0x9f, 0x41, 0x9d, 0x9f } },
    { "12345678901234567890123456789012345678901234567890123456789012"
      "345678901234567890",
      { 0x57, 0xed, 0xf4, 0xa2, 0x2b, 0xe3, 0xc9, 0x55, 0xac, 0x49,
        0xda, 0x2e, 0x21, 0x07, 0xb6, 0x7a } }
  };

/*
  Serpent test vectors.
*/
#define SerpentEncipherTestVectors  4
#define SerpentDecipherTestVectors  4

struct SerpentTestVector
{
  size_t
    key_length;

  int
    fail;

  unsigned char
    key[32],
    plaintext[16],
    result[16];
};

struct SerpentTestVector
  serpent_encipher_test_vector[] =
  {
    {
      0, 0,
      { 0 },
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0x12, 0x07, 0xfc, 0xce, 0x9b, 0xd0, 0xd6, 0x47, 0x6a, 0xe9,
        0x8f, 0xbe, 0xd1, 0x43, 0xa0, 0xe2 }
    },
    {
      16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0x4c, 0x7d, 0x8a, 0x32, 0x80, 0x72, 0xa2, 0x2c, 0x82, 0x3e,
        0x4a, 0x1f, 0x3a, 0xcd, 0xa1, 0x6d }
    },
    {
      32, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f },
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0xde, 0x26, 0x9f, 0xf8, 0x33, 0xe4, 0x32, 0xb8, 0x5b, 0x2e,
        0x88, 0xd2, 0x70, 0x1c, 0xe7, 0x5c }
    },
    {
      16, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x80 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0xdd, 0xd2, 0x6b, 0x98, 0xa5, 0xff, 0xd8, 0x2c, 0x05, 0x34,
        0x5a, 0x9d, 0xad, 0xbf, 0xaf, 0x49}
    }
  };

struct SerpentTestVector
  serpent_decipher_test_vector[] =
  {
    {
      0, 0,
      { 0 },
      { 0x12, 0x07, 0xfc, 0xce, 0x9b, 0xd0, 0xd6, 0x47, 0x6a, 0xe9,
        0x8f, 0xbe, 0xd1, 0x43, 0xa0, 0xe2 },
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
    },
    {
      16, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
      { 0x4c, 0x7d, 0x8a, 0x32, 0x80, 0x72, 0xa2, 0x2c, 0x82, 0x3e,
        0x4a, 0x1f, 0x3a, 0xcd, 0xa1, 0x6d },
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
    },
    {
      32, 0,
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
        0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f },
      { 0xde, 0x26, 0x9f, 0xf8, 0x33, 0xe4, 0x32, 0xb8, 0x5b, 0x2e,
        0x88, 0xd2, 0x70, 0x1c, 0xe7, 0x5c },
      { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
    },
    {
      16, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x80 },
      { 0xdd, 0xd2, 0x6b, 0x98, 0xa5, 0xff, 0xd8, 0x2c, 0x05, 0x34,
        0x5a, 0x9d, 0xad, 0xbf, 0xaf, 0x49},
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    }
  };

/*
  SHA1 test vectors from from FIPS PUB 180-1.
*/
#define SHA1Digestsize  20
#define SHA1TestVectors  2

struct SHA1TestVector
{
  unsigned char
    plaintext[128],
    digest[SHA1Digestsize];
};

struct SHA1TestVector
  sha1_test_vector[] =
  {
    { "abc",
      { 0xA9, 0x99, 0x3E, 0x36, 0x47, 0x06, 0x81, 0x6A, 0xBA, 0x3E,
        0x25, 0x71, 0x78, 0x50, 0xC2, 0x6C ,0x9C, 0xD0, 0xD8, 0x9D }
    },
    { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
      { 0x84, 0x98, 0x3E, 0x44, 0x1C, 0x3B, 0xD2, 0x6E ,0xBA, 0xAE,
        0x4A, 0xA1, 0xF9, 0x51, 0x29, 0xE5, 0xE5, 0x46, 0x70, 0xF1 }
    }
  };

/*
  SHA2256 test vectors from from NIST.
*/
#define SHA2256Digestsize  32
#define SHA2256TestVectors  2

struct SHA2256TestVector
{
  unsigned char
    plaintext[128],
    digest[SHA2256Digestsize];
};

struct SHA2256TestVector
  sha2256_test_vector[] =
  {
    { "abc",
      { 0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40,
        0xde, 0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17,
        0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad }
    },
    { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
      { 0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26,
        0x93, 0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff,
        0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1 }
    },
  };

/*
  SHA2384 test vectors from from NIST and kerneli.
*/
#define SHA2384Digestsize  48
#define SHA2384TestVectors  4

struct SHA2384TestVector
{
  unsigned char
    plaintext[128],
    digest[SHA2384Digestsize];
};

struct SHA2384TestVector
  sha2384_test_vector[] =
  {
    { "abc",
      { 0xcb, 0x00, 0x75, 0x3f, 0x45, 0xa3, 0x5e, 0x8b, 0xb5, 0xa0, 0x3d,
        0x69, 0x9a, 0xc6, 0x50, 0x07, 0x27, 0x2c, 0x32, 0xab, 0x0e, 0xde,
        0xd1, 0x63, 0x1a, 0x8b, 0x60, 0x5a, 0x43, 0xff, 0x5b, 0xed, 0x80,
        0x86, 0x07, 0x2b, 0xa1, 0xe7, 0xcc, 0x23, 0x58, 0xba, 0xec, 0xa1,
        0x34, 0xc8, 0x25, 0xa7 }
    },
    { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
      { 0x33, 0x91, 0xfd, 0xdd, 0xfc, 0x8d, 0xc7, 0x39, 0x37, 0x07, 0xa6,
        0x5b, 0x1b, 0x47, 0x09, 0x39, 0x7c, 0xf8, 0xb1, 0xd1, 0x62, 0xaf,
        0x05, 0xab, 0xfe, 0x8f, 0x45, 0x0d, 0xe5, 0xf3, 0x6b, 0xc6, 0xb0,
        0x45, 0x5a, 0x85, 0x20, 0xbc, 0x4e, 0x6f, 0x5f, 0xe9, 0x5b, 0x1f,
        0xe3, 0xc8, 0x45, 0x2b  }
    },
    { "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
      "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
      { 0x09, 0x33, 0x0c, 0x33, 0xf7, 0x11, 0x47, 0xe8, 0x3d, 0x19, 0x2f,
        0xc7, 0x82, 0xcd, 0x1b, 0x47, 0x53, 0x11, 0x1b, 0x17, 0x3b, 0x3b,
        0x05, 0xd2, 0x2f, 0xa0, 0x80, 0x86, 0xe3, 0xb0, 0xf7, 0x12, 0xfc,
        0xc7, 0xc7, 0x1a, 0x55, 0x7e, 0x2d, 0xb9, 0x66, 0xc3, 0xe9, 0xfa,
        0x91, 0x74, 0x60, 0x39  }
    },
    { "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
      "efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
      { 0x3d, 0x20, 0x89, 0x73, 0xab, 0x35, 0x08, 0xdb, 0xbd, 0x7e, 0x2c,
        0x28, 0x62, 0xba, 0x29, 0x0a, 0xd3, 0x01, 0x0e, 0x49, 0x78, 0xc1,
        0x98, 0xdc, 0x4d, 0x8f, 0xd0, 0x14, 0xe5, 0x82, 0x82, 0x3a, 0x89,
        0xe1, 0x6f, 0x9b, 0x2a, 0x7b, 0xbc, 0x1a, 0xc9, 0x38, 0xe2, 0xd1,
        0x99, 0xe8, 0xbe, 0xa4 }
    },
  };

/*
  SHA2512 test vectors from from NIST.
*/
#define SHA2512Digestsize  64
#define SHA2512TestVectors  4

struct SHA2512TestVector
{
  unsigned char
    plaintext[128],
    digest[SHA2512Digestsize];
};

struct SHA2512TestVector
  sha2512_test_vector[] =
  {
    { "abc",
      { 0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba, 0xcc, 0x41, 0x73,
        0x49, 0xae, 0x20, 0x41, 0x31, 0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9,
        0x7e, 0xa2, 0x0a, 0x9e, 0xee, 0xe6, 0x4b, 0x55, 0xd3, 0x9a, 0x21,
        0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1, 0xa8, 0x36, 0xba, 0x3c, 0x23,
        0xa3, 0xfe, 0xeb, 0xbd, 0x45, 0x4d, 0x44, 0x23, 0x64, 0x3c, 0xe8,
        0x0e, 0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f }
    },
    { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
      { 0x20, 0x4a, 0x8f, 0xc6, 0xdd, 0xa8, 0x2f, 0x0a, 0x0c, 0xed, 0x7b,
        0xeb, 0x8e, 0x08, 0xa4, 0x16, 0x57, 0xc1, 0x6e, 0xf4, 0x68, 0xb2,
        0x28, 0xa8, 0x27, 0x9b, 0xe3, 0x31, 0xa7, 0x03, 0xc3, 0x35, 0x96,
        0xfd, 0x15, 0xc1, 0x3b, 0x1b, 0x07, 0xf9, 0xaa, 0x1d, 0x3b, 0xea,
        0x57, 0x78, 0x9c, 0xa0, 0x31, 0xad, 0x85, 0xc7, 0xa7, 0x1d, 0xd7,
        0x03, 0x54, 0xec, 0x63, 0x12, 0x38, 0xca, 0x34, 0x45 }
    },
    { "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
      "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
      { 0x8e, 0x95, 0x9b, 0x75, 0xda, 0xe3, 0x13, 0xda, 0x8c, 0xf4, 0xf7,
        0x28, 0x14, 0xfc, 0x14, 0x3f, 0x8f, 0x77, 0x79, 0xc6, 0xeb, 0x9f,
        0x7f, 0xa1, 0x72, 0x99, 0xae, 0xad, 0xb6, 0x88, 0x90, 0x18, 0x50,
        0x1d, 0x28, 0x9e, 0x49, 0x00, 0xf7, 0xe4, 0x33, 0x1b, 0x99, 0xde,
        0xc4, 0xb5, 0x43, 0x3a, 0xc7, 0xd3, 0x29, 0xee, 0xb6, 0xdd, 0x26,
        0x54, 0x5e, 0x96, 0xe5, 0x5b, 0x87, 0x4b, 0xe9, 0x09 }
    },
    { "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
      "efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
      { 0x93, 0x0d, 0x0c, 0xef, 0xcb, 0x30, 0xff, 0x11, 0x33, 0xb6, 0x89,
        0x81, 0x21, 0xf1, 0xcf, 0x3d, 0x27, 0x57, 0x8a, 0xfc, 0xaf, 0xe8,
        0x67, 0x7c, 0x52, 0x57, 0xcf, 0x06, 0x99, 0x11, 0xf7, 0x5d, 0x8f,
        0x58, 0x31, 0xb5, 0x6e, 0xbf, 0xda, 0x67, 0xb2, 0x78, 0xe6, 0x6d,
        0xff, 0x8b, 0x84, 0xfe, 0x2b, 0x28, 0x70, 0xf7, 0x42, 0xa5, 0x80,
        0xd8, 0xed, 0xb4, 0x19, 0x87, 0x23, 0x28, 0x50, 0xc9 }
    },
  };

/*
  SHA3 test vectors.
*/
#define SHA3Digestsize  32
#define SHA3TestVectors  2

struct SHA3TestVector
{
  unsigned char
    plaintext[128],
    digest[SHA3Digestsize];
};

struct SHA3TestVector
  sha3_test_vector[] =
  {
    { "abc",
      { 0x4e, 0x03, 0x65, 0x7a, 0xea, 0x45, 0xa9, 0x4f, 0xc7, 0xd4, 0x7b,
        0xa8, 0x26, 0xc8, 0xd6, 0x67, 0xc0, 0xd1, 0xe6, 0xe3, 0x3a, 0x64,
        0xa0, 0x36, 0xec, 0x44, 0xf5, 0x8f, 0xa1, 0x2d, 0x6c, 0x45 }
    },
    { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
      { 0x45, 0xd3, 0xb3, 0x67, 0xa6, 0x90, 0x4e, 0x6e, 0x8d, 0x50, 0x2e,
        0xe0, 0x49, 0x99, 0xa7, 0xc2, 0x76, 0x47, 0xf9, 0x1f, 0xa8, 0x45,
        0xd4, 0x56, 0x52, 0x5f, 0xd3, 0x52, 0xae, 0x3d, 0x73, 0x71 }
    }
  };

/*
  Twofish test vectors.
*/
#define TwofishEncipherTestVectors    4
#define TwofishDecipherTestVectors    4

struct TwofishTestVector {
  size_t
    key_length,
    length,
    result_length;

  int
    fail;

  unsigned char
    key[32],
    nonce[16],
    plaintext[48],
    result[48];
};

struct TwofishTestVector
  twofish_encipher_test_vector[] =
  {
    {
      16, 16, 16, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x9f, 0x58, 0x9f, 0x5c, 0xf6, 0x12, 0x2c, 0x32, 0xb6, 0xbf,
        0xec, 0x2f, 0x2a, 0xe8, 0xc3, 0x5a },
    },
    {
      16, 16, 16, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x9f, 0x58, 0x9f, 0x5c, 0xf6, 0x12, 0x2c, 0x32, 0xb6, 0xbf,
        0xec, 0x2f, 0x2a, 0xe8, 0xc3, 0x5a },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0xd4, 0x91, 0xdb, 0x16, 0xe7, 0xb1, 0xc3, 0x9e, 0x86, 0xcb,
        0x08, 0x6b, 0x78, 0x9f, 0x54, 0x19 },
    },
    {
      16, 16, 16, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0xd4, 0x91, 0xdb, 0x16, 0xe7, 0xb1, 0xc3, 0x9e, 0x86, 0xcb,
        0x08, 0x6b, 0x78, 0x9f, 0x54, 0x19 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x05, 0xef, 0x8c, 0x61, 0xa8, 0x11, 0x58, 0x26, 0x34, 0xba,
        0x5c, 0xb7, 0x10, 0x6a, 0xa6, 0x41 },
    },
    {
      16, 48, 48, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00 },
      { 0x9f, 0x58, 0x9f, 0x5c, 0xf6, 0x12, 0x2c, 0x32, 0xb6, 0xbf, 0xec,
        0x2f, 0x2a, 0xe8, 0xc3, 0x5a, 0xd4, 0x91, 0xdb, 0x16, 0xe7, 0xb1,
        0xc3, 0x9e, 0x86, 0xcb, 0x08, 0x6b, 0x78, 0x9f, 0x54, 0x19, 0x05,
        0xef, 0x8c, 0x61, 0xa8, 0x11, 0x58, 0x26, 0x34, 0xba, 0x5c, 0xb7,
        0x10, 0x6a, 0xa6, 0x41 },
    },
  };

struct TwofishTestVector
  twofish_decipher_test_vector[] =
  {
    {
      16, 16, 16, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x9f, 0x58, 0x9f, 0x5c, 0xf6, 0x12, 0x2c, 0x32, 0xb6, 0xbf,
        0xec, 0x2f, 0x2a, 0xe8, 0xc3, 0x5a },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    },
    {
      16, 16, 16, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x9f, 0x58, 0x9f, 0x5c, 0xf6, 0x12, 0x2c, 0x32, 0xb6, 0xbf,
        0xec, 0x2f, 0x2a, 0xe8, 0xc3, 0x5a },
      { 0xd4, 0x91, 0xdb, 0x16, 0xe7, 0xb1, 0xc3, 0x9e, 0x86, 0xcb,
        0x08, 0x6b, 0x78, 0x9f, 0x54, 0x19 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    },
    {
      16, 16, 16, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0xd4, 0x91, 0xdb, 0x16, 0xe7, 0xb1, 0xc3, 0x9e, 0x86, 0xcb,
        0x08, 0x6b, 0x78, 0x9f, 0x54, 0x19 },
      { 0x05, 0xef, 0x8c, 0x61, 0xa8, 0x11, 0x58, 0x26, 0x34, 0xba,
        0x5c, 0xb7, 0x10, 0x6a, 0xa6, 0x41 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    },
    {
      16, 48, 48, 0,
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
      { 0x9f, 0x58, 0x9f, 0x5c, 0xf6, 0x12, 0x2c, 0x32, 0xb6, 0xbf, 0xec,
        0x2f, 0x2a, 0xe8, 0xc3, 0x5a, 0xd4, 0x91, 0xdb, 0x16, 0xe7, 0xb1,
        0xc3, 0x9e, 0x86, 0xcb, 0x08, 0x6b, 0x78, 0x9f, 0x54, 0x19, 0x05,
        0xef, 0x8c, 0x61, 0xa8, 0x11, 0x58, 0x26, 0x34, 0xba, 0x5c, 0xb7,
        0x10, 0x6a, 0xa6, 0x41 },
      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00 },
    },
  };

/*
  Zip test vectors.
*/
#define ZipDigestsize  16
#define ZipTestVectors  7

struct ZipTestVector
{
  unsigned char
    plaintext[128],
    chaos[128];

  size_t
    chaossize;
};

struct ZipTestVector
  zip_test_vector[] =
  {
    { "",
      { 0x78, 0x9c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01 },
      8
    },
    { "a",
      { 0x78, 0x9c, 0x4b, 0x04, 0x00, 0x00, 0x62, 0x00, 0x62 },
      9
    },
    { "abc",
      { 0x78, 0x9c, 0x4b, 0x4c, 0x4a, 0x06, 0x00, 0x02, 0x4d, 0x01, 0x27 },
      11
    },
    { "message digest",
      { 0x78, 0x9c, 0xcb, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x55, 0x48,
        0xc9, 0x4c, 0x4f, 0x2d, 0x2e, 0x01, 0x00, 0x29, 0x75, 0x05, 0x86 },
      22
    },
    { "abcdefghijklmnopqrstuvwxyz",
      { 0x78, 0x9c, 0x4b, 0x4c, 0x4a, 0x4e, 0x49, 0x4d, 0x4b, 0xcf, 0xc8,
        0xcc, 0xca, 0xce, 0xc9, 0xcd, 0xcb, 0x2f, 0x28, 0x2c, 0x2a, 0x2e,
        0x29, 0x2d, 0x2b, 0xaf, 0xa8, 0xac, 0x02, 0x00, 0x90, 0x86, 0x0b,
        0x20 },
      34
    },
    { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      { 0x78, 0x9c, 0x73, 0x74, 0x72, 0x76, 0x71, 0x75, 0x73, 0xf7, 0xf0,
        0xf4, 0xf2, 0xf6, 0xf1, 0xf5, 0xf3, 0x0f, 0x08, 0x0c, 0x0a, 0x0e,
        0x09, 0x0d, 0x0b, 0x8f, 0x88, 0x8c, 0x4a, 0x4c, 0x4a, 0x4e, 0x49,
        0x4d, 0x4b, 0xcf, 0xc8, 0xcc, 0xca, 0xce, 0xc9, 0xcd, 0xcb, 0x2f,
        0x28, 0x2c, 0x2a, 0x2e, 0x29, 0x2d, 0x2b, 0xaf, 0xa8, 0xac, 0x32,
        0x30, 0x34, 0x32, 0x36, 0x31, 0x35, 0x33, 0xb7, 0xb0, 0x04, 0x00,
        0x8a, 0xdb, 0x15, 0x0c },
      70
    },
    { "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
      { 0x78, 0x9c, 0x33, 0x34, 0x32, 0x36, 0x31, 0x35, 0x33, 0xb7,
        0xb0, 0x34, 0x30, 0xa4, 0x0a, 0x0b, 0x00, 0x97, 0xb6, 0x10, 0x69 },
      21
    }
  };

#endif
